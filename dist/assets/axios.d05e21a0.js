var w=Object.defineProperty;var d=Object.getOwnPropertySymbols;var L=Object.prototype.hasOwnProperty,P=Object.prototype.propertyIsEnumerable;var m=(s,t,e)=>t in s?w(s,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):s[t]=e,p=(s,t)=>{for(var e in t||(t={}))L.call(t,e)&&m(s,e,t[e]);if(d)for(var e of d(t))P.call(t,e)&&m(s,e,t[e]);return s};var k=(s,t,e)=>(m(s,typeof t!="symbol"?t+"":t,e),e);import{b as h}from"./axios.b6599a80.js";import{a as g,r as f}from"./index.8383100e.js";const $=()=>R.get("/RefreshToken"),y=s=>z.post("/auth/login",s);let u=!1;const l=[];class B{constructor(t){k(this,"http");this.http=h.create(t),this.http.interceptors.request.use(e=>{const{token:o}=g();return o&&(e.headers.Authorization=o),e},e=>Promise.reject(e)),this.http.interceptors.response.use(e=>{const{status:o}=e;if(o===401)if(!u)u=!0,$().then(({code:a,data:n})=>{if(a===200){const{token:r,refreshToken:i}=n;return localStorage.setItem("token",`Bearer ${r}`),localStorage.setItem("refreshToken",`Bearer ${i}`),g().updateToken(r,i),this.http.defaults.headers.common.Authorization=`Bearer ${r}`,l.forEach(c=>{c(r)}),this.http(e.config)}return f.push("/Login"),e}).catch(()=>{f.push("/Login")}).finally(()=>{u=!1});else return new Promise(a=>{l.push(n=>{h.defaults.headers.common.Authorization=`Bearer ${n}`,a(this.http(e.config))})});return e},e=>{var o;if(((o=e.response)==null?void 0:o.status)===401)if(!u)u=!0,$().then(a=>{const{code:n,data:r}=a;if(n===200){const{token:i,refreshToken:c}=r;return localStorage.setItem("token",`Bearer ${i}`),localStorage.setItem("refreshToken",`Bearer ${c}`),g().updateToken(i,c),h.defaults.headers.common.Authorization=`Bearer ${i}`,l.forEach(T=>{T(i)}),h(e.config)}return f.push("/Login"),e}).catch(()=>{f.push("/Login")}).finally(()=>{u=!1});else return new Promise(a=>{l.push(n=>{h.defaults.headers.common.Authorization=`Bearer ${n}`,a(h(e.config))})});return Promise.reject(e)})}async get(t,e,o){return new Promise((a,n)=>{this.http.get(t,p({params:e},o)).then(r=>{a(r.data)}).catch(r=>n(r))})}async post(t,e,o){return new Promise((a,n)=>{this.http.post(t,e,p({},o)).then(r=>a(r.data)).catch(r=>n(r))})}}const R=new B({baseURL:"",timeout:6e3}),z=new B({baseURL:"/api",timeout:6e3});export{R as a,y as l};
